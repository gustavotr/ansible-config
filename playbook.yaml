---
- name: Development Environment Setup
  hosts: localhost
  become: no

  tasks:
    - name: Check ansible_env.HOME
      fail:
        msg: "Aborting the playbook since ansible_env.HOME is /root"
      when: ansible_env.HOME == '/root'

    - name: Install dependencies
      become: yes
      package:
        name: "{{ item }}"
        state: latest
      loop:
       - unzip
       - ripgrep
       - lazygit
       - fd
      when: ansible_os_family == 'Archlinux' or ansible_distribution == 'Fedora'

    - name: Install dependencies
      become: yes
      apt:
        name: "{{ item }}"
        state: latest
      loop:
       - unzip
       - build-essential
       - ripgrep
       - fd-find
       - git
      when: ansible_os_family == 'Debian'

    - name: Configure git
      shell: |
        git config --global user.email "gustavo@trudax.tech"
        git config --global user.name "Gustavo T. Rudiger"
        git config --global core.editor "vim"
        curl https://gist.githubusercontent.com/gustavotr/bfa8c0b3e2af9cdc238d110052ce679c/raw/24a0500328a9eea51cfe51606622fed4fbdc5903/.gitconfig --output {{ ansible_env.HOME }}/.gitconfig
        curl https://gist.githubusercontent.com/gustavotr/bfa8c0b3e2af9cdc238d110052ce679c/raw/24a0500328a9eea51cfe51606622fed4fbdc5903/.gitconfig-newscorp --output {{ ansible_env.HOME }}/.gitconfig-newscorp

    - name: Install NVM
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      args:
        executable: /bin/bash
      environment:
        NVM_DIR: "{{ ansible_env.HOME }}/.nvm"
      register: nvm_install_result
      changed_when: nvm_install_result.rc != 0

    - name: Add NVM initialization to Zsh profile
      blockinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        block: |
          export NVM_DIR="{{ ansible_env.HOME }}/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

          # autoload node version based on nvmrc file
          autoload -U add-zsh-hook
          load-nvmrc() {
            local node_version="$(nvm version)"
            local nvmrc_path="$(nvm_find_nvmrc)"

            if [ -n "$nvmrc_path" ]; then
              local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

              if [ "$nvmrc_node_version" = "N/A" ]; then
                nvm install
              elif [ "$nvmrc_node_version" != "$node_version" ]; then
                nvm use
              fi
            elif [ "$node_version" != "$(nvm version default)" ]; then
              echo "Reverting to nvm default version"
              nvm use default
            fi
          }
          add-zsh-hook chpwd load-nvmrc
          load-nvmrc

    - name: Install node
      shell: >
        . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install {{ item }}
      args:
        executable: /bin/bash
        chdir: "{{ ansible_env.HOME }}"
        creates: "{{ ansible_env.HOME }}/.nvm/versions/{{ item }}*"
      loop:
        - 18
        - 20
      register: node_install_result
      changed_when: node_install_result.rc != 0

    - name: Install global npm packages
      npm:
        name: "{{ item }}"
        state: latest
        global: yes
      loop:
       - git-cz
       - apify-cli
       - pnpm
       - yarn

    - name: Install packages
      become: yes
      package:
        name: "{{ item }}"
        state: latest
      loop:
       - neovim
       - tmux
       - tmuxp
      when: ansible_os_family == 'Archlinux' or ansible_distribution == 'Fedora'

    - name: Install Neovim
      become: yes
      shell: |
        curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
        chmod ugo+x nvim.appimage
        ./nvim.appimage --appimage-extract
        rm nvim.appimage
        chmod -R ugo+x squashfs-root
        rm -rf /nvim-squashfs
        mv squashfs-root /nvim-squashfs
        ln -sf /nvim-squashfs/AppRun /usr/bin/nvim
      when: ansible_os_family == 'Debian'

    - name: Install packages
      become: yes
      apt:
        name: "{{ item }}"
        state: latest
      loop:
       - tmux
       - tmuxp
      when: ansible_os_family == 'Debian'

    - name: Install neovim config
      git:
        repo: git@github.com:gustavotr/lazyvim-config.git
        dest: "{{ansible_env.HOME}}/.config/nvim"
        version: main
        update: yes
      environment:
        GIT_ASKPASS: /bin/true

    - name: Configure Tmux
      shell: |
        curl https://gist.githubusercontent.com/gustavotr/7f78a415dcb5d28118efbcfbedfb7bed/raw/841cdcc0436210d9fa319abde80eeeb18f8542c1/.tmux.conf --output {{ ansible_env.HOME}}/.tmux.conf
        git clone https://github.com/tmux-plugins/tpm {{ ansible_env.HOME }}/.tmux/plugins/tpm
        bash {{ ansible_env.HOME }}/.tmux/plugins/tpm/scripts/install_plugins.sh
      args:
        executable: /bin/bash

    - name: Configure Tmuxp
      git:
        repo: git@github.com:gustavotr/tmuxp-config.git
        dest: "{{ansible_env.HOME}}/.tmuxp"
        version: master
        update: yes
      environment:
        GIT_ASKPASS: /bin/true
